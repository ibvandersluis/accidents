# Clear workspace
rm(list=ls())
# Load data
AccidentData = read.csv("accidents.csv", header = T, na.strings = "-1")
# Inspect data
fix(AccidentData)
# Inspect data
fix(AccidentData)
# Clear workspace
rm(list=ls())
# Load data
AccidentData = read.csv("accidents.csv", na.strings = "-1")
# Inspect data
fix(AccidentData)
dim(AccidentData)
names(AccidentData)
# Inspect fatality data (accident is fatal if accident_severity = 1)
table(AccidentData$accident_severity)
# Create 'Fatal' variable
AccidentData$fatal = 0
names(AccidentData)
# Set 'fatal' to 1 if there was a fatality
AccidentData$fatal[AccidentData$accident_severity == 1] = 1
# Check that number of fatal = 1 is the same as what we get from accident_severity
table(AccidentData$fatal)
# Get fatality percentages
prop.table(table(AccidentData$fatal))
# Remove unwanted variables
table(AccidentData$fatal, AccidentData$accident_severity)
# Remove unwanted variables
AccidentData$accident_severity = NULL
AccidentData$police_force = NULL
AccidentData$local_authority_.district. = NULL
AccidentData$local_authority_.highway. = NULL
AccidentData$car_passenger = NULL
AccidentData$bus_or_coach_passenger = NULL
AccidentData$pedestrian_road_maintenance_worker = NULL
AccidentData$location_easting_osgr = NULL
AccidentData$location_northing_osgr = NULL
AccidentData$latitude = NULL
AccidentData$longitude = NULL
AccidentData$lsoa_of_accident_location = NULL
AccidentData$did_police_officer_attend_scene_of_accident = NULL
AccidentData$sex_of_casualty = NULL
AccidentData$casualty_class = NULL
AccidentData$age_of_casualty = NULL
AccidentData$age_band_of_casualty = NULL
AccidentData$casualty_type = NULL
AccidentData$number_of_casualties = NULL
AccidentData$NUmber_of_Casualities_unique_to_accident_index = NULL
AccidentData$X1st_road_number = NULL
AccidentData$X2nd_road_number = NULL
AccidentData$casualty_reference = NULL
AccidentData$casualty_severity = NULL
AccidentData$casualty_home_area_type = NULL
AccidentData$casualty_imd_decile = NULL
# Check if variance of feature includes fatality
table(AccidentData$speed_limit, AccidentData$fatal)
table(AccidentData$towing_and_articulation, AccidentData$fatal)
table(AccidentData$pedestrian_crossing.human_control, AccidentData$fatal)
prop.table(table(AccidentData$pedestrian_crossing.human_control, AccidentData$fatal))
table(AccidentData$pedestrian_location, AccidentData$fatal)
table(AccidentData$pedestrian_movement, AccidnetData$fatal)
table(AccidentData$pedestrian_movement, AccidentData$fatal)
table(AccidentData$junction_detail, AccidentData$fatal)
table(AccidentData$propulsion_code, AccidentData$fatal)
table(AccidentData$skidding_and_overturning, AccidentData$fatal)
table(AccidentData$was_vehicle_left_hand_drive., AccidentData$fatal)
table(AccidentData$driver_imd_decile, AccidentData$fatal)
table(AccidentData$driver_home_area_type, AccidentData$fatal)
table(AccidentData$driver_imd_decile, AccidentData$fatal)
summary(AccidentData$driver_imd_decile)
fix(AccidentData)
# Clear workspace
rm(list=ls())
# Load data
AccidentData = read.csv("accidents.csv", header = T, na.strings = "-1")
# Inspect data
fix(AccidentData)
dim(AccidentData)
names(AccidentData)
attach(AccidentData)
# Inspect fatality data (accident is fatal if accident_severity = 1)
table(accident_severity)
# Create 'Fatal' variable
fatal = 0
rm(fatal)
# Create 'Fatal' variable
AccidentData$fatal = 0
names(AccidentData)
# Set 'fatal' to 1 if there was a fatality
AccidentData$fatal[accident_severity == 1] = 1
# Check that number of fatal = 1 is the same as what we get from accident_severity
table(fatal)
# Create 'Fatal' variable
AccidentData$fatal = 0
names(AccidentData)
# Set 'fatal' to 1 if there was a fatality
AccidentData$fatal[accident_severity == 1] = 1
# Check that number of fatal = 1 is the same as what we get from accident_severity
table(fatal)
# Check that number of fatal = 1 is the same as what we get from accident_severity
table(AccidentData$fatal)
# Check that number of fatal = 1 is the same as what we get from accident_severity
attach(AccidentData)
dim(AccidentData)
names(AccidentData)
attach(AccidentData)
# Check that number of fatal = 1 is the same as what we get from accident_severity
attach(AccidentData)
table(fatal)
table(Afatal, accident_severity)
table(fatal, accident_severity)
# Get fatality percentages
prop.table(table(fatal))
# Remove unwanted variables
accident_severity = NULL
rm(accident_severity)
# Remove unwanted variables
AccidentData$accident_severity = NULL
AccidentData$police_force = NULL
AccidentData$local_authority_.district. = NULL
AccidentData$local_authority_.highway. = NULL
AccidentData$car_passenger = NULL
AccidentData$bus_or_coach_passenger = NULL
AccidentData$pedestrian_road_maintenance_worker = NULL
AccidentData$location_easting_osgr = NULL
AccidentData$location_northing_osgr = NULL
AccidentData$latitude = NULL
AccidentData$longitude = NULL
AccidentData$lsoa_of_accident_location = NULL
AccidentData$did_police_officer_attend_scene_of_accident = NULL
AccidentData$sex_of_casualty = NULL
AccidentData$casualty_class = NULL
AccidentData$age_of_casualty = NULL
AccidentData$age_band_of_casualty = NULL
AccidentData$casualty_type = NULL
AccidentData$number_of_casualties = NULL
AccidentData$NUmber_of_Casualities_unique_to_accident_index = NULL
AccidentData$X1st_road_number = NULL
AccidentData$X2nd_road_number = NULL
AccidentData$casualty_reference = NULL
AccidentData$casualty_severity = NULL
AccidentData$casualty_home_area_type = NULL
AccidentData$casualty_imd_decile = NULL
# Check if variance of feature includes fatality
table(AccidentData$speed_limit, AccidentData$fatal)
# Check if variance of feature includes fatality
table(speed_limit, fatal)
table(towing_and_articulation, fatal)
table(pedestrian_crossing.human_control, fatal)
table(pedestrian_location, fatal)
table(pedestrian_movement, AccidentData$fatal)
table(pedestrian_movement, fatal)
table(junction_detail, fatal)
table(propulsion_code, AccidentData$fatal)
table(propulsion_code, fatal)
table(skidding_and_overturning, fatal)
table(was_vehicle_left_hand_drive., fatal)
table(driver_imd_decile, fatal)
summary(driver_imd_decile)
# The feature driver_imd_decile is entirely empty and can be removed
AccidentData$driver_imd_decile = NULL
table(driver_home_area_type, fatal)
table(vehicle_imd_decile, fatal)
# vehicle_imd_decile is also empty and can be removed
AccidentData$vehicle_imd_decile = NULL
# The feature driver_imd_decile is entirely empty and can be removed
AccidentData$driver_imd_decile = NULL
table(AccidentData$vehicle_imd_decile, AccidentData$fatal)
# vehicle_imd_decile is also empty and can be removed
AccidentData$vehicle_imd_decile = NULL
table(AccidentData$No_of_Vehicles_involved_unique_to_accident_index, AccidentData$number_of_vehicles)
# No_of_Vehicles_involved_unique_to_accident_index is identical to numer_of_vehicles and can be removed
AccidentData$No_of_Vehicles_involved_unique_to_accident_index = NULL
table(AccidentData$number_of_vehicles, AccidentData$fatal)
fix(AccidentData)
?str_sub
??str_sub
?substring
AccidentData$time = substring(AccidentData$time, first = 12)
summary(AccidentData$time)
AccidentData$time[1:10,]
AccidentData$time
# The 'date' variable either shows a date in 2015 or an integer in the 40,000 range
# Unfortunately this means it cannot be relied upon for any useful information
# Remove date
AccidentData$date = NULL
names(AccidentData)
table(AccidentData$journey_purpose_of_driver, AccidentData$fatal)
names(AccidentData)
table(AccidentData$urban_or_rural_area, AccidentData$fatal)
prop.table(table(AccidentData$urban_or_rural_area, AccidentData$fatal))
?write.csv()
# Export CSV of prepared data
write.csv(AccidentData, "prepv1.csv")
# Export CSV of prepared data
write.csv(AccidentData, "prepv1.csv", row.names = T)
# Export CSV of prepared data
write.csv(AccidentData, "prepv1.csv", row.names = T)
# Export CSV of prepared data
write.csv(AccidentData, "prepv1.csv", row.names = F)
# Save history
savehistory()
# Quit
q()
# Clear workspace
rm(list=ls())
# Load data
Data = read.csv("prepv1.csv")
fix(Data)
attach(Data)
# Trim dataframe
Data = Data[1:5000,]
# Fit linear model
lm.fit = lm(fatal ~ ., data = Data)
table(Data$fatal)
summary(lm.fit)
# Fit linear model
lm.fit = lm(fatal ~ ., data = Data)
table(Data$fatal)
summary(lm.fit)
# Clear workspace
rm(list=ls())
# Load data
AccidentData = read.csv("accidents.csv", header = T, na.strings = "-1")
# Inspect data
fix(AccidentData)
dim(AccidentData)
names(AccidentData)
# Inspect fatality data (accident is fatal if accident_severity = 1)
table(AccidentData$accident_severity)
# Create 'Fatal' variable
AccidentData$fatal = 0
names(AccidentData)
# Set 'fatal' to 1 if there was a fatality
AccidentData$fatal[AccidentData$accident_severity == 1] = 1
# Check that number of fatal = 1 is the same as what we get from accident_severity
table(AccidentData$fatal)
table(AccidentData$fatal, AccidentData$accident_severity)
# Get fatality percentages
prop.table(table(AccidentData$fatal))
# Remove unwanted variables
AccidentData$accident_severity = NULL
AccidentData$police_force = NULL
AccidentData$local_authority_.district. = NULL
AccidentData$local_authority_.highway. = NULL
AccidentData$car_passenger = NULL
AccidentData$bus_or_coach_passenger = NULL
AccidentData$pedestrian_road_maintenance_worker = NULL
AccidentData$location_easting_osgr = NULL
AccidentData$location_northing_osgr = NULL
AccidentData$latitude = NULL
AccidentData$longitude = NULL
AccidentData$lsoa_of_accident_location = NULL
AccidentData$did_police_officer_attend_scene_of_accident = NULL
AccidentData$sex_of_casualty = NULL
AccidentData$casualty_class = NULL
AccidentData$age_of_casualty = NULL
AccidentData$age_band_of_casualty = NULL
AccidentData$casualty_type = NULL
AccidentData$number_of_casualties = NULL
AccidentData$NUmber_of_Casualities_unique_to_accident_index = NULL
AccidentData$X1st_road_number = NULL
AccidentData$X2nd_road_number = NULL
AccidentData$casualty_reference = NULL
AccidentData$casualty_severity = NULL
AccidentData$casualty_home_area_type = NULL
AccidentData$casualty_imd_decile = NULL
# Check if variance of feature includes fatality
table(AccidentData$speed_limit, AccidentData$fatal)
table(AccidentData$towing_and_articulation, AccidentData$fatal)
table(AccidentData$pedestrian_crossing.human_control, AccidentData$fatal)
table(AccidentData$pedestrian_location, AccidentData$fatal)
table(AccidentData$pedestrian_movement, AccidentData$fatal)
table(AccidentData$junction_detail, AccidentData$fatal)
table(AccidentData$propulsion_code, AccidentData$fatal)
table(AccidentData$skidding_and_overturning, AccidentData$fatal)
table(AccidentData$was_vehicle_left_hand_drive., AccidentData$fatal)
table(AccidentData$number_of_vehicles, AccidentData$fatal)
table(AccidentData$urban_or_rural_area, AccidentData$fatal)
prop.table(table(AccidentData$urban_or_rural_area, AccidentData$fatal))
table(AccidentData$driver_imd_decile, AccidentData$fatal)
summary(AccidentData$driver_imd_decile)
fix(AccidentData)
# The feature driver_imd_decile is entirely empty and can be removed
AccidentData$driver_imd_decile = NULL
table(AccidentData$vehicle_imd_decile, AccidentData$fatal)
# vehicle_imd_decile is also empty and can be removed
AccidentData$vehicle_imd_decile = NULL
table(AccidentData$No_of_Vehicles_involved_unique_to_accident_index, AccidentData$number_of_vehicles)
# The feature driver_imd_decile is entirely empty and can be removed
AccidentData$driver_imd_decile = NULL
table(AccidentData$vehicle_imd_decile, AccidentData$fatal)
# vehicle_imd_decile is also empty and can be removed
AccidentData$vehicle_imd_decile = NULL
table(AccidentData$No_of_Vehicles_involved_unique_to_accident_index, AccidentData$number_of_vehicles)
# No_of_Vehicles_involved_unique_to_accident_index is identical to numer_of_vehicles and can be removed
AccidentData$No_of_Vehicles_involved_unique_to_accident_index = NULL
# Remove junk data from 'time' variable
AccidentData$time = substring(AccidentData$time, first = 12)
# The 'date' variable either shows a date in 2015 or an integer in the 40,000 range
# Unfortunately this means it cannot be relied upon for any useful information
# Remove date
AccidentData$date = NULL
Data = Data[1:5000,]
AccidentData = AccidentData[1:5000,]
# Export CSV of prepared data
write.csv(AccidentData, "prepv1.csv", row.names = F)
# Save history
savehistory()
# Quit
q()
# Clear workspace
rm(list=ls())
# Load data
Data = read.csv("prepv1.csv")
fix(Data)
# Fit linear model
lm.fit = lm(fatal ~ ., data = Data)
summary(lm.fit)
attach(Data)
plot(age_of_driver, speed_limit, col="red"[fatal])
plot(age_of_driver, speed_limit, col=c("red", "black")[fatal])
plot(age_of_driver, speed_limit, col=fatal)
plot(age_of_driver, speed_limit, col=Data$fatal)
plot(age_of_driver, speed_limit, col=c("red", "black")[fatal])
plot(age_of_driver, speed_limit, col=c("black", "red")[fatal])
plot(age_of_driver, speed_limit, col=fatal)
plot(age_of_driver, speed_limit, col="red"fatal)
plot(age_of_driver, speed_limit, col="red"[fatal])
# Clear workspace
rm(list=ls())
# Load data
AccidentData = read.csv("accidents.csv", header = T, na.strings = "-1")
# Inspect data
fix(AccidentData)
dim(AccidentData)
names(AccidentData)
# Inspect fatality data (accident is fatal if accident_severity = 1)
table(AccidentData$accident_severity)
# Create 'Fatal' variable
AccidentData$fatal = 0
names(AccidentData)
# Set 'fatal' to 1 if there was a fatality
AccidentData$fatal[AccidentData$accident_severity == 1] = 1
# Check that number of fatal = 1 is the same as what we get from accident_severity
table(AccidentData$fatal)
table(AccidentData$fatal, AccidentData$accident_severity)
# Get fatality percentages
prop.table(table(AccidentData$fatal))
# Remove unwanted variables
AccidentData$accident_severity = NULL
AccidentData$police_force = NULL
AccidentData$local_authority_.district. = NULL
AccidentData$local_authority_.highway. = NULL
AccidentData$car_passenger = NULL
AccidentData$bus_or_coach_passenger = NULL
AccidentData$pedestrian_road_maintenance_worker = NULL
AccidentData$location_easting_osgr = NULL
AccidentData$location_northing_osgr = NULL
AccidentData$latitude = NULL
AccidentData$longitude = NULL
AccidentData$lsoa_of_accident_location = NULL
AccidentData$did_police_officer_attend_scene_of_accident = NULL
AccidentData$sex_of_casualty = NULL
AccidentData$casualty_class = NULL
AccidentData$age_of_casualty = NULL
AccidentData$age_band_of_casualty = NULL
AccidentData$casualty_type = NULL
AccidentData$number_of_casualties = NULL
AccidentData$NUmber_of_Casualities_unique_to_accident_index = NULL
AccidentData$X1st_road_number = NULL
AccidentData$X2nd_road_number = NULL
AccidentData$casualty_reference = NULL
AccidentData$casualty_severity = NULL
AccidentData$casualty_home_area_type = NULL
AccidentData$casualty_imd_decile = NULL
# Check if variance of feature includes fatality
table(AccidentData$speed_limit, AccidentData$fatal)
table(AccidentData$towing_and_articulation, AccidentData$fatal)
table(AccidentData$pedestrian_crossing.human_control, AccidentData$fatal)
table(AccidentData$pedestrian_location, AccidentData$fatal)
table(AccidentData$pedestrian_movement, AccidentData$fatal)
table(AccidentData$junction_detail, AccidentData$fatal)
table(AccidentData$propulsion_code, AccidentData$fatal)
table(AccidentData$skidding_and_overturning, AccidentData$fatal)
table(AccidentData$was_vehicle_left_hand_drive., AccidentData$fatal)
table(AccidentData$number_of_vehicles, AccidentData$fatal)
table(AccidentData$urban_or_rural_area, AccidentData$fatal)
prop.table(table(AccidentData$urban_or_rural_area, AccidentData$fatal))
table(AccidentData$driver_imd_decile, AccidentData$fatal)
summary(AccidentData$driver_imd_decile)
fix(AccidentData)
# The feature driver_imd_decile is entirely empty and can be removed
AccidentData$driver_imd_decile = NULL
table(AccidentData$vehicle_imd_decile, AccidentData$fatal)
# vehicle_imd_decile is also empty and can be removed
AccidentData$vehicle_imd_decile = NULL
table(AccidentData$No_of_Vehicles_involved_unique_to_accident_index, AccidentData$number_of_vehicles)
# No_of_Vehicles_involved_unique_to_accident_index is identical to numer_of_vehicles and can be removed
AccidentData$No_of_Vehicles_involved_unique_to_accident_index = NULL
# Remove junk data from 'time' variable
AccidentData$time = substring(AccidentData$time, first = 12)
# The 'date' variable either shows a date in 2015 or an integer in the 40,000 range
# Unfortunately this means it cannot be relied upon for any useful information
# Remove date
AccidentData$date = NULL
AccidentData = AccidentData[1:5000,]
AccidentData$accident_index = NULL
AccidentData$vehicle_reference = NULL
# Export CSV of prepared data
write.csv(AccidentData, "prepv1.csv", row.names = F)
# Save history
savehistory()
# Quit
q()
# Clear workspace
rm(list=ls())
# Load data
accidents = read.csv("prepv1.csv")
function (name, pos = -1L, envir = as.environment(pos), all.names = FALSE,
pattern, sorted = TRUE)
# Clear workspace
rm(list=ls())
# Clear workspace
rm(list=ls())
# Load data
AccidentData = read.csv("accidents.csv", header = T, na.strings = "-1")
# Inspect data
fix(AccidentData)
dim(AccidentData)
names(AccidentData)
# Inspect fatality data (accident is fatal if accident_severity = 1)
table(AccidentData$accident_severity)
# Create 'Fatal' variable
AccidentData$fatal = 0
names(AccidentData)
# Set 'fatal' to 1 if there was a fatality
AccidentData$fatal[AccidentData$accident_severity == 1] = 1
# Check that number of fatal = 1 is the same as what we get from accident_severity
table(AccidentData$fatal)
table(AccidentData$fatal, AccidentData$accident_severity)
# Get fatality percentages
prop.table(table(AccidentData$fatal))
# Remove unwanted variables
AccidentData$accident_severity = NULL
AccidentData$police_force = NULL
AccidentData$local_authority_.district. = NULL
AccidentData$local_authority_.highway. = NULL
AccidentData$car_passenger = NULL
AccidentData$bus_or_coach_passenger = NULL
AccidentData$pedestrian_road_maintenance_worker = NULL
AccidentData$location_easting_osgr = NULL
AccidentData$location_northing_osgr = NULL
AccidentData$latitude = NULL
AccidentData$longitude = NULL
AccidentData$lsoa_of_accident_location = NULL
AccidentData$did_police_officer_attend_scene_of_accident = NULL
AccidentData$sex_of_casualty = NULL
AccidentData$casualty_class = NULL
AccidentData$age_of_casualty = NULL
AccidentData$age_band_of_casualty = NULL
AccidentData$casualty_type = NULL
AccidentData$number_of_casualties = NULL
AccidentData$NUmber_of_Casualities_unique_to_accident_index = NULL
AccidentData$X1st_road_number = NULL
AccidentData$X2nd_road_number = NULL
AccidentData$casualty_reference = NULL
AccidentData$casualty_severity = NULL
AccidentData$casualty_home_area_type = NULL
AccidentData$casualty_imd_decile = NULL
AccidentData$accident_index = NULL
AccidentData$vehicle_reference = NULL
# Check if variance of feature includes fatality
table(AccidentData$speed_limit, AccidentData$fatal)
table(AccidentData$towing_and_articulation, AccidentData$fatal)
table(AccidentData$pedestrian_crossing.human_control, AccidentData$fatal)
table(AccidentData$pedestrian_location, AccidentData$fatal)
table(AccidentData$pedestrian_movement, AccidentData$fatal)
table(AccidentData$junction_detail, AccidentData$fatal)
table(AccidentData$propulsion_code, AccidentData$fatal)
table(AccidentData$skidding_and_overturning, AccidentData$fatal)
table(AccidentData$was_vehicle_left_hand_drive., AccidentData$fatal)
table(AccidentData$number_of_vehicles, AccidentData$fatal)
table(AccidentData$urban_or_rural_area, AccidentData$fatal)
prop.table(table(AccidentData$urban_or_rural_area, AccidentData$fatal))
table(AccidentData$driver_imd_decile, AccidentData$fatal)
summary(AccidentData$driver_imd_decile)
# The feature driver_imd_decile is entirely empty and can be removed
AccidentData$driver_imd_decile = NULL
table(AccidentData$vehicle_imd_decile, AccidentData$fatal)
# vehicle_imd_decile is also empty and can be removed
AccidentData$vehicle_imd_decile = NULL
table(AccidentData$No_of_Vehicles_involved_unique_to_accident_index, AccidentData$number_of_vehicles)
# No_of_Vehicles_involved_unique_to_accident_index is identical to numer_of_vehicles and can be removed
AccidentData$No_of_Vehicles_involved_unique_to_accident_index = NULL
# Remove junk data from 'time' variable
AccidentData$time = substring(AccidentData$time, first = 12)
# The 'date' variable either shows a date in 2015 or an integer in the 40,000 range
# Unfortunately this means it cannot be relied upon for any useful information
# Remove date
AccidentData$date = NULL
AccidentData = AccidentData[1:5000,]
# Export CSV of prepared data
write.csv(AccidentData, "prep.csv", row.names = F)
# Save history
savehistory()
# Clear workspace
rm(list=ls())
# Load data
accidents = read.csv("prep.csv")
